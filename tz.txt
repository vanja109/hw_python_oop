Ваша задача — разработать программный модуль фитнес-трекера, который обрабатывает данные для трех видов тренировок: для бега, спортивной ходьбы и плавания.
Этот модуль
	принимает от блока датчиков информацию о прошедшей тренировке,
	определяет вид тренировки,
	рассчитывает результаты тренировки,
	выводит информационное сообщение о результатах тренировки.
Информационное сообщение должно включать такую информацию:
	тип тренировки (бег, ходьба или плавание);
	длительность тренировки
	дистанция, которую преодолел пользователь, в километрах;
	среднюю скорость на дистанции, в км/ч;
	расход энергии, в килокалориях.
	
В ТЗ указаны формулы, которые вы будете использовать для расчёта результатов тренировок. Хороший разработчик чётко следует всем требованиям ТЗ. Не меняйте формулы,
используйте их в точно таком же виде, как они указаны в задании.


Структура программы

+++	Каждый вид спортивной активности в модуле должен быть описан соответствующим классом:
	Бег → class Running ;
	Спортивная ходьба → class SportsWalking ;
	Плавание → class Swimming .

+++	Конструктор каждого из классов должен получать информацию с датчиков:
	action, тип int — количество совершённых действий (число шагов при ходьбе и беге либо гребков — при плавании);
	duration, тип float — длительность тренировки;
	weight, тип float — вес спортсмена.
	
!!!	Чтобы определить дистанцию, которую преодолел спортсмен, нужно число шагов или гребков, переданное в action, перевести в километры.
	Для расчёта нужно добавить атрибуты класса:
	LEN_STEP — расстояние, которое спортсмен преодолевает за один шаг или гребок.
	Один шаг — это 0.65 метра, один гребок при плавании — 1.38 метра.
	M_IN_KM — константа для перевода значений из метров в километры. Её значение — 1000.
	
+++	Методы классов, которые отвечают за обработку данных:
	расчёт дистанции, которую пользователь преодолел за тренировку: get_distance();
	расчёт средней скорости движения во время тренировки: get_mean_speed();
	расчёт количества потраченных калорий за тренировку: get_spent_calories();
	создание объекта сообщения о результатах тренировки: show_training_info().

+++ Базовый класс Training
	В классах, описывающих любой из видов тренировки, применяются одни и те же свойства и методы. Чтобы избежать дублирования кода, необходимо создать базовый класс Training. 
	Он должен содержать все основные свойства и методы для тренировок. Каждый класс, описывающий определённый вид тренировки, будет дополнять и расширять базовый класс.

+++	Методы базового класса
	Метод get_distance() возвращает дистанцию (в километрах), которую преодолел пользователь за время тренировки.
	Формула расчёта:

		action * LEN_STEP / M_IN_KM 

	Метод get_mean_speed() возвращает значение средней скорости движения во время тренировки.
	Формула расчёта:
		преодоленная_дистанция_за_тренировку / время_тренировки 
		
	Метод get_spent_calories() возвращает количество килокалорий, израсходованных за время тренировки.
	Логика подсчета калорий для каждого вида тренировки будет своя, поэтому в базовом классе не нужно описывать поведение метода, в его теле останется ключевое слово pass.
	
	Метод show_training_info() возвращает объект класса сообщения.

Особенности реализации классов-наследников

class Running

	Все свойства и методы этого класса без изменений наследуются от базового класса. Исключение составляет только метод расчёта калорий, его нужно переопределить.
	Расход калорий для бега рассчитывается по такой формуле:
		(18 * средняя_скорость - 20) * вес_спортсмена / M_IN_KM * время_тренировки_в_минутах 
	Важно вынести все неименованные значения в переменные. Это сделает код понятнее для разработчиков, которые будут читать ваш код.
	Например:
		coeff_calorie_1 = 18
		coeff_calorie_2 = 20 

class SportsWalking

	Конструктор этого класса принимает дополнительный параметр height — рост спортсмена.
	Расчёт калорий для этого класса должен проводиться по такой формуле:
		(0.035 * вес + (средняя_скорость**2 // рост) * 0.029 * вес) * время_тренировки_в_минутах 
	Числовым коэффициентам тоже нужны имена, не забывайте про это.
	
class Swimming

	Конструктор класса Swimming, кроме свойств базового класса, принимает еще два параметра:
	length_pool — длина бассейна в метрах;
	count_pool — сколько раз пользователь переплыл бассейн.
	В классе Swimming нужно переопределить не только метод расчета калорий get_spent_calories(), но и метод get_mean_speed(), который рассчитывает среднюю скорость.
	
	Формула расчёта средней скорости при плавании:
		длина_бассейна * count_pool / M_IN_KM / время_тренировки 
		
	Формула для расчёта израсходованных калорий:
		(средняя_скорость + 1.1) * 2 * вес  
		
	Есть и ещё один параметр, который надо переопределить, ведь расстояние, преодолеваемое за один гребок, отличается от длины шага. Значит, необходимо переопределить атрибут базового класса.

class InfoMessage
	Это самостоятельный класс для создания объектов сообщений. У этого класса должен быть метод для вывода сообщений на экран.
	Объекты этого класса создаются вызовом метода show_training_info() для классов тренировок.
	Свойства класса InfoMessage:
		training_type — имя класса тренировки;
		duration — длительность тренировки в часах;
		distance — дистанция в километрах, которую преодолел пользователь за время тренировки;
		speed — средняя скорость, с которой двигался пользователь;
		calories — количество килокалорий, которое израсходовал пользователь за время тренировки.
	У класса InfoMessage должен быть метод get_message(), который возвращает строку сообщения:
		Тип тренировки: {training_type}; Длительность: {duration} ч.; Дистанция: {distance} км; Ср. скорость: {speed} км/ч; Потрачено ккал: {calories}. 
		
	Числовые значения должны округляться при выводе до тысячных долей (до третьего знака после запятой).









